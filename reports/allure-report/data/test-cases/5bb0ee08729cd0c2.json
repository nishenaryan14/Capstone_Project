{"uid":"5bb0ee08729cd0c2","name":"test_sidebar_about_new_tab_then_logout","fullName":"src.seleniumProject.tests.test_window_handling#test_sidebar_about_new_tab_then_logout","historyId":"6194882dbae3bdc15ddae83decb616c4","time":{"start":1761073020171,"stop":1761073031737,"duration":11566},"description":"\nSidebar → right-click About → open in new tab → click 'Try it for free'\n→ close tab → back to parent → logout via still-open sidebar.\n","descriptionHtml":"<p>Sidebar → right-click About → open in new tab → click 'Try it for free'<br />\n→ close tab → back to parent → logout via still-open sidebar.</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"dcd59e9e2023d1571929ff36ff62ffea\")>\n\n    @pytest.mark.selenium_topics\n    def test_sidebar_about_new_tab_then_logout(driver):\n        \"\"\"\n        Sidebar → right-click About → open in new tab → click 'Try it for free'\n        → close tab → back to parent → logout via still-open sidebar.\n        \"\"\"\n        login_page = LoginPage(driver)\n        login_page.open(\"https://www.saucedemo.com\")\n        login_page.login_with(\"standard_user\", \"secret_sauce\")\n        login_page.screenshot(\"01_inventory_page\")\n    \n        time.sleep(3)\n    \n        # 1. Open sidebar\n        sidebar = SauceSidebarPage(driver)\n        sidebar.open_sidebar()\n        login_page.screenshot(\"02_sidebar_opened\")\n    \n        # 2. Right-click “About”\n        sidebar.right_click_about()\n        login_page.screenshot(\"03_context_menu_about\")\n    \n        # 3. Simulate “Open in new tab” (Ctrl + Shift + Enter on the link)\n        about_link = driver.find_element(By.ID, \"about_sidebar_link\")\n        about_link.send_keys(Keys.CONTROL + Keys.SHIFT + Keys.RETURN)\n        login_page.screenshot(\"04_new_tab_opened\")\n    \n        # 4. Switch to the new tab\n        original_tab = driver.current_window_handle\n>       WebDriverWait(driver, 5).until(lambda d: len(d.window_handles) == 2)\n\nsrc\\seleniumProject\\tests\\test_window_handling.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"dcd59e9e2023d1571929ff36ff62ffea\")>, method = <function test_sidebar_about_new_tab_then_logout.<locals>.<lambda> at 0x0000019AB23C6020>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"headless","time":{"start":1761072760741,"stop":1761072760741,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentStep":false,"attachmentsCount":0},{"name":"visual_pause","time":{"start":1761073016741,"stop":1761073016741,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentStep":false,"attachmentsCount":0},{"name":"driver","time":{"start":1761073016741,"stop":1761073020170,"duration":3429},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentStep":false,"attachmentsCount":0}],"afterStages":[{"name":"driver::0","time":{"start":1761073031744,"stop":1761073033925,"duration":2181},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentStep":false,"attachmentsCount":0},{"name":"visual_pause::0","time":{"start":1761073033926,"stop":1761073034927,"duration":1001},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"stepsCount":0,"attachmentStep":false,"attachmentsCount":0}],"labels":[{"name":"tag","value":"selenium_topics"},{"name":"parentSuite","value":"src.seleniumProject.tests"},{"name":"suite","value":"test_window_handling"},{"name":"host","value":"LAPTOP-QBEOK0VL"},{"name":"thread","value":"5264-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"src.seleniumProject.tests.test_window_handling"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":["selenium_topics"]},"source":"5bb0ee08729cd0c2.json","parameterValues":[]}